# This workflow will triage pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: PR
on:
 pull_request_target:
   types: [opened, synchronize, reopened, ready_for_review]
   
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/labeler@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
    - uses: mshick/add-pr-comment@v1
      with:
        message: |
          Simple PR
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
        allow-repeats: true # This is the default
    - uses: mshick/add-pr-comment@v1
      with:
        message: |
          /draft
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
        allow-repeats: true # This is the default
    - uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸ‘‹ Thanks for reporting!'
          })
    - uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          github.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['Triage']
          })
    - uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          // Get a list of all issues created by the PR opener
          // See: https://octokit.github.io/rest.js/#pagination
          const creator = context.payload.sender.login
          const opts = github.issues.listForRepo.endpoint.merge({
            ...context.issue,
            creator,
            state: 'all'
          })
          const issues = await github.paginate(opts)

          for (const issue of issues) {
            if (issue.number === context.issue.number) {
              continue
            }
            if (issue.pull_request) {
              return // Creator is already a contributor.
            }
          }

          await github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Welcome, new contributor!'
          })  
    - name: View context attributes
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: console.log(context)
    # - name: Slash Command Dispatch
    #   uses: peter-evans/slash-command-dispatch@v2
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     commands: |
    #       commands